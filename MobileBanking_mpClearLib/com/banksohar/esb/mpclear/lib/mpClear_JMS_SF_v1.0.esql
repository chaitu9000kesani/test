BROKER SCHEMA com.banksohar.esb.mpclear.lib
--DECLARE SLEEPCOUNT EXTERNAL INTEGER 0;
CREATE FILTER MODULE mpClear_JMS_SF_Filter
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF  Environment.Variables.AuditLog.OperationName in ('CstmrOpngReq','CstmrMntncReq', 'CstmrClsgReq', 'AcntOpngReq', 'AcntMntncReq', 'AcntClsgReq') THEN
			RETURN FALSE;	
		END IF;
			
		RETURN TRUE;
	END;

END MODULE;

CREATE COMPUTE MODULE Fetch_MSGID_PAY
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
	
	
		DECLARE originalMessageID CHARACTER '';
		SET originalMessageID	=	SUBSTRING(SUBSTRING(InputRoot.XMLNSC.*:envelope.*:content AFTER '<OrgnlMsgId>') BEFORE '</OrgnlMsgId>');
		
		DECLARE curTime TIME CURRENT_TIME;
		
		DECLARE timeDiff INTEGER EXTRACT(SECOND FROM curTime)-EXTRACT(SECOND FROM Environment.Variables.inTime);
		
		IF timeDiff <	50 THEN
			
			IF 	originalMessageID	=	Environment.Variables.MsgId THEN
			
				--PROPAGATE TO TERMINAL 'out' DELETE NONE;
				RETURN TRUE;
		
			ELSE
			
				PROPAGATE TO TERMINAL 'out1' DELETE NONE;
				RETURN FALSE;
						
			END IF;
			
		
		ELSE
			
			RETURN FALSE;
			
		END IF;	
		
		
		
END;

CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE Fetch_MSGID_REG
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
	
	
		DECLARE originalMessageID CHARACTER '';
		--DECLARE regmessage	 CHARACTER '';
		
		DECLARE curTime TIME CURRENT_TIME;
		
		DECLARE timeDiff INTEGER EXTRACT(SECOND FROM curTime)-EXTRACT(SECOND FROM Environment.Variables.inTime);
		
		SET originalMessageID	=	SUBSTRING(SUBSTRING(SUBSTRING(InputRoot.XMLNSC.*:envelope.*:content AFTER '<ps:OrgnlMsgId>')AFTER '<ps:Id>' ) BEFORE '</ps:Id>');
		
		IF timeDiff <	50 THEN
			
			IF 	originalMessageID	=	Environment.Variables.MsgId THEN
			
				--PROPAGATE TO TERMINAL 'out' DELETE NONE;
				RETURN TRUE;
		
			ELSE
			
				PROPAGATE TO TERMINAL 'out1' DELETE NONE;
				RETURN FALSE;
						
			END IF;
			
		
		ELSE
			
			RETURN FALSE;
			
	END IF;	
	
END;

CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
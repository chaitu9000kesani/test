BROKER SCHEMA com.banksohar.esb.lib
PATH com.banksohar.esb;


CREATE COMPUTE MODULE FailureHandler_SF_PopulateEnvironment
	CREATE FUNCTION Main() RETURNS BOOLEAN
	  BEGIN
         /* Variable to hold the error codes in ERRCD_LIST temporarily*/ 	  
	     DECLARE ErrCdTemp CHARACTER '';
	     /* index of the array where the Error Codes will be saved premanently*/ 
	     DECLARE ErrCdIndx INTEGER 1;
	     DECLARE NativeErrorCode CHARACTER '';
	     DECLARE NativeErrorMessage CHARACTER '';
	     DECLARE NativeErrorDescription CHARACTER '';
	     SET ErrCdTemp=ERRCD_LIST||',';
	     /*Populating  Enviornment Array from previously created temporary variable*/  
		 WHILE ErrCdTemp <> '' DO
		      SET Environment.Env.ErrCdArr[ErrCdIndx]=SUBSTRING(ErrCdTemp BEFORE ',');
              SET ErrCdTemp=SUBSTRING(ErrCdTemp AFTER ',');
              SET ErrCdIndx=ErrCdIndx+1;	
		 END WHILE;
		 /*Setting output message body*/
	     CALL NativeExceptionFilter(InputExceptionList, NativeErrorCode, NativeErrorMessage, NativeErrorDescription);
	     SET OutputRoot.XMLNSC.ERROR.ErrorCode='BIP'||NativeErrorCode;
	     SET OutputRoot.XMLNSC.ERROR.MsgFlowName=MessageFlowLabel;
	     SET OutputRoot.XMLNSC.ERROR.OperationName= COALESCE(Environment.Variables.AuditLog.OperationName,InputRoot.XMLNSC.IIBLogEvent.LogEvent.OperationName,InputLocalEnvironment.Destination.RouterList.DestinationData.labelName,'Invalid Operation');
	     SET OutputRoot.XMLNSC.ERROR.ErrorTimestamp=CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd HH:mm:ss.SSS');
	     SET OutputRoot.XMLNSC.ERROR.ErrorDescription=NativeErrorDescription;

		 
		 
		 /* Capturing the payload during the exception*/
		   SET OutputRoot.Properties.CodedCharSetId		=1208;
		   SET OutputRoot.Properties.ContentType		='UTF-8';
		   --SET OutputRoot.XMLNSC.ERROR.FailedMessage	=InputBody.*[<];
		   SET OutputRoot.XMLNSC.ERROR.FailedMessage	=InputExceptionList;
		   
		 /*
		 IF InputRoot.SOAP IS NULL THEN
		   			
			    SET OutputRoot.XMLNSC.ERROR.FailedMessage =CAST('Invalid XML Input' AS BLOB CCSID 1208);
			       
		 END IF; 



	     /*Setting payload of incoming message to output body for error like Timeout*/ 
	     IF(CAST(NativeErrorCode AS INTEGER)< ERRCD_LWR_RNG OR CAST(NativeErrorCode AS INTEGER)> ERRCD_UPR_RNG) THEN
		     
		     IF  (NativeErrorCode NOT IN(Environment.Env.ErrCdArr)) THEN
			 
			       SET OutputRoot.XMLNSC.ERROR.FailedMessage = COALESCE(Environment.Variables.AuditLog.LogMessage,InputRoot.XMLNSC.IIBLogEvent.LogEvent.LogMessage);	
		     
		     END IF;
   	     
   	     END IF;
      */
      
      
      RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
